# --------------------- IMPORTS ---------------------

import streamlit as st # Framework pour cr√©er des applications web interactives
import pandas as pd # Biblioth√®que pour manipuler des donn√©es tabulaires
import geopandas as gpd
import folium
from streamlit_folium import st_folium


# --------------------- FONCTIONS ---------------------

# Fonction pour traduire les statuts cod√©s en libell√©s compr√©hensibles
def traduire_statut(statut):
    traductions = {
            "VU": "Vuln√©rable",
            "EN": "En danger",
            "CR": "En danger critique",
            "NT": "Quasi menac√©",
            "LC": "Pr√©occupation mineure",
            "DD": "Donn√©es insuffisantes",
            "RE": "√âteint r√©gionalement",
            "NA": "Non applicable (Non indig√®ne ou donn√©es occasionnelles)",
            "NE": "Non √©valu√©",
            "DH IV": "Directive Habitats, Faune, Flore - Annexe IV",
            "DH II&IV": "Directive Habitats, Faune, Flore - Annexe II & IV",
            "DO I": "Directive Oiseaux - Annexe I",
            "N.C." : "Non Concern√©",
            "PRA en cours" : "Plan r√©gional d'action en cours",
            "PNA en cours" : "Plan national d'action en cours",
            "PRA en pr√©paration" : "Plan r√©gional d'action en pr√©paration",
            "PNA en pr√©paration" : "Plan national d'action en pr√©paration",
            "PNG en cours" : "Plan national de gestion en cours",
            "PRA en cours + PNA en pr√©paration" : "Plan r√©gional d'action en cours + Plan national d'action en pr√©paration"}
                    
    return traductions.get(statut, statut) # Retourne le statut traduit ou le statut d'origine si non trouv√©            


# Fonction pour obtenir une couleur en fonction de l‚Äôindice de priorit√© de conservation
def get_conservation_color(index):
    colors = {
        1: '#00B050',  # vert fonc√©
        2: '#92D050',  # vert clair
        3: '#FFFF00',  # jaune
        4: '#FF9900',  # orange
        5: '#FF0000',  # rouge
    }
    return colors.get(index, '#ffffff')  # Blanc par d√©faut si l‚Äôindice est inconnu


# Fonction pour obtenir une couleur en fonction de l‚Äôindice de priorit√© r√©glementaire
def get_reglementaire_color(index):
    colors = {
        0: '#00B050',  # vert fonc√©
        1: '#92D050',  # vert clair
        2: '#FFFF00',  # jaune
        3: '#FF9900',  # orange
        4: '#FF0000',  # rouge
    }
    return colors.get(index, '#ffffff') # Blanc par d√©faut si l‚Äôindice est inconnu


# --------------------- CONFIGURATION ---------------------

# D√©finition de la configuration de la page Streamlit
st.set_page_config(page_title="Esp√®ces remarquables et prescriptions", page_icon="ü¶ã", layout="wide")


# --------------------- AUTHENTIFICATION --------------

# D√©finir un mot de passe correct
PASSWORD = "caprimulgus"

# Initialiser une session pour suivre l'√©tat de l'utilisateur
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

# Si l'utilisateur n'est pas encore connect√©
if not st.session_state.authenticated:
    with st.form("login_form"):
        st.write("### Entrez le mot de passe pour acc√©der √† l'application")
        password_input = st.text_input("Mot de passe", type="password")
        submitted = st.form_submit_button("Se connecter")

        if submitted:
            if password_input == PASSWORD:
                st.session_state.authenticated = True
                st.rerun() # recharge la page pour cacher le formulaire
            else:
                st.error("Mot de passe incorrect.")

# Si l'utilisateur est connect√©
if st.session_state.authenticated:

    # Insertion du logo et configuration de la barre lat√©rale
    st.sidebar.image("logo ONF.png", width=200)
    st.sidebar.title("Navigation")
    st.sidebar.markdown("<div style='font-size:20px;'>Aller √† :</div>", unsafe_allow_html=True)

    # Application d'un style personnalis√© aux composants pour agrandir les polices
    st.markdown("""
                            <style>
                    div.stMarkdown p, div.stDataFrame, div.stSelectbox, div.stExpander, div[data-testid="stVerticalBlock"] {
                        font-size: 20px !important;
                    }
                    div[data-testid="stMarkdownContainer"] {
                        font-size: 20px !important;
                    }
                </style>
            """, unsafe_allow_html=True)

    # Cr√©ation d‚Äôun menu de navigation lat√©ral
    page = st.sidebar.radio("Aller √† :",["Accueil", "Recherche par for√™t", "Recherche par esp√®ce"], label_visibility="collapsed")


    # --------------------- CHARGEMENT DES DONN√âES ---------------------

    # Chargement du fichier principal contenant les observations de la Base de donn√©es naturalistes de l'ONF
    @st.cache_data
    def load_data():
        return pd.read_excel('MonExportBdn.xlsx')

    # Chargement de la liste des codes CD_NOM autoris√©s (filtrage pour avoir uniquement les esp√®ces du tableau de m√©tadonn√©es des esp√®ces remarquables)
    @st.cache_data
    def load_codes_autorises():
        df_codes = pd.read_excel('Metadonnees.xlsx')
        return df_codes['CD_NOM'].astype(str).str.strip().tolist()

    # Chargement du fichier de r√©f√©rence des esp√®ces avec leurs m√©tadonn√©es
    @st.cache_data
    def load_reference_especes():
        df_reference = pd.read_excel('Metadonnees.xlsx')
        return df_reference

    # Ex√©cution des fonctions de chargement
    df = load_data()
    codes_autorises = load_codes_autorises()
    df_reference = load_reference_especes()

    # Nettoyage des colonnes pour garantir l'uniformit√© des CD_NOM
    df_reference['CD_NOM'] = df_reference['CD_NOM'].astype(str).str.strip()
    df["Code taxon (cd_nom)"] = df["Code taxon (cd_nom)"].astype(str).str.split(',')
    df = df.explode("Code taxon (cd_nom)").copy() # Une ligne par taxon si plusieurs dans une m√™me cellule
    df["Code taxon (cd_nom)"] = df["Code taxon (cd_nom)"].str.strip()
    df = df[df["Code taxon (cd_nom)"].isin(codes_autorises)] # Filtrage uniquement sur les esp√®ces autoris√©es
    forets = df['For√™t'].dropna().unique() # Liste des for√™ts sans doublons ni NaN


    # --------------------- PAGE ACCUEIL ---------------------


    if page == "Accueil":
        st.title("ü¶ã Esp√®ces remarquables et prescriptions") # Affichage d‚Äôun titre en haut de la page d'accueil
        
        # Texte de pr√©sentation
        st.markdown("""
        <div style='font-size:22px'>
            Bienvenue dans l'outil de consultation des donn√©es d'esp√®ces remarquables par for√™t avec les prescriptions environnementales associ√©es.
            <br><br>
            Une esp√®ce est consid√©r√©e remarquable si elle poss√®de au moins un des statuts suivants :
            <ul>
                <li>Esp√®ce prot√©g√©e par arr√™t√© national ou r√©gional ;</li>
                <li>Esp√®ce r√©glement√©e au niveau europ√©en par les directives Oiseaux (Annexe I) ou Habitats, Faune, Flore (Annexe II & IV) ;</li>
                <li>Esp√®ce menac√©e sur la liste rouge r√©gionale normande ou sur la liste rouge nationale (Statut "Vuln√©rable = VU", "En danger = EN" ou "En danger critique = CR") ;</li>
                <li>Esp√®ce faisant l'objet d'un plan national d'action en faveur des esp√®ces menac√©es ;</li>
                <li>Esp√®ce faisant l'objet d'une clause environnementale de l'ONF (9200-15-GUI-SAM-052).</li>
            </ul>
            <br>
            Les esp√®ces ont √©t√© hi√©rarchis√©es selon deux indices, un indice de priorit√© de conservation et un indice de priorit√© r√©glementaire. 
            <br><br>
            L'indice de <b>priorit√© de conservation</b> int√®gre la menace d'extinction au niveau r√©gional et national, ainsi que la responsabilit√© de la Normandie dans la conservation de l'esp√®ce. La m√©thode utilis√©e pour calculer cet indice se base sur les travaux de Barneix et Gigot (2013) et sur les initiatives de hi√©rarchisation qui ont d√©coul√© de ces travaux √† l'√©chelle des r√©gions fran√ßaises. 
            <br><br>
            L'indice de <b>priorit√© r√©glementaire</b> int√®gre les diff√©rents types de r√©glementation (Directives europ√©ennes, protection par arret√©) et les subtilit√©s d'interpr√©tation des articles d'arr√™t√©s. En effet, certains articles prot√®gent uniquement les sp√©cimens et d'autres articles prot√®gent, en plus des sp√©cimens, les √©l√©ments n√©cessaires au bon fonctionnement du cycle biologique de l'esp√®ce, incluant notamment les sites de reproduction et de repos. Enfin, cet indice prend en compte le risque que l'ONF entrave ces r√©glementations. En effet, pour certaines esp√®ces tr√®s communes comme la m√©sange bleue, le risque r√©glementaire est tr√®s faible √©tant donn√© que la conservation de l'esp√®ce √† l'√©chelle du massif est assur√©e par la gestion classique de l'ONF.
            <br><br>
            Ces deux indices permettront de hi√©rarchiser les enjeux et de prioriser les clauses environnementales.
            <br><br>
            ‚¨ÖÔ∏è Utilisez le menu √† gauche pour consulter les esp√®ces remarquables pr√©sentes en for√™t et acc√©der aux statuts et prescriptions.
        </div>
        """, unsafe_allow_html=True)


    # --------------------- PAGE FOR√äT ---------------------


    if page == "Recherche par for√™t":

        if 'selected_foret' not in st.session_state:
            st.session_state.selected_foret = None
        if 'selected_parcelle' not in st.session_state:
            st.session_state.selected_parcelle = None

        # Aucune for√™t s√©lectionn√©e : afficher la liste
        if st.session_state.selected_foret is None:
            selected_foret = st.selectbox("üå≤ S√©lectionnez une for√™t :", [""] + sorted(forets))
            if st.button("üîçVoir les esp√®ces remarquables par parcelle"):
                st.session_state.selected_foret = selected_foret
                st.rerun()

        # For√™t s√©lectionn√©e mais pas encore de parcelle
        elif st.session_state.selected_parcelle is None:
            foret = st.session_state.selected_foret
            df_foret = df[df['For√™t'] == foret]
            parcelles_disponibles = df_foret["Parcelle de for√™t"].dropna().unique()
            selected_parcelle = st.selectbox("üìå S√©lectionnez une parcelle :", [""] + sorted(parcelles_disponibles))

            # Gestion des coordonn√©es et du sous-ensemble de donn√©es √† afficher
            if selected_parcelle and selected_parcelle != "":
                df_affichage = df_foret[df_foret["Parcelle de for√™t"] == selected_parcelle]
            else:
                df_affichage = df_foret

            lat_centre = df_affichage["Coordonn√©e 2"].mean()
            lon_centre = df_affichage["Coordonn√©e 1"].mean()

            # Cr√©er la carte
            m = folium.Map(location=[lat_centre, lon_centre], zoom_start=13)

            # Ajouter le cadastre avec le service WMS de l'IGN
            folium.raster_layers.WmsTileLayer(
                url="https://data.geopf.fr/wms-r/wms",
                layers="CADASTRALPARCELS.PARCELLAIRE_EXPRESS",
                name="Cadastre",
                fmt="image/png",
                transparent=True,
                version="1.3.0",
                overlay=True,
                control=True
            ).add_to(m)

            # Ajouter les points naturalistes avec popup enrichi
            for _, row in df_affichage.iterrows():
                if pd.notna(row["Coordonn√©e 1"]) and pd.notna(row["Coordonn√©e 2"]):
                    popup = f""" <b>Esp√®ce :</b> {row['Esp√®ce']}<br>
                    <b>Commentaire de la localisation : </b> {row["Commentaire de la localisation"]}<br>
                    <b>Commentaire de l'observation : </b> {row["Commentaire de l'observation"]}"""
        
                    folium.Marker(
                        location=[row["Coordonn√©e 2"], row["Coordonn√©e 1"]],
                        popup=folium.Popup(popup, max_width=500),
                        icon=folium.Icon(color="green", icon="leaf", prefix="fa")
                    ).add_to(m)

            # Ajouter le contr√¥le de couche (permet d'activer/d√©sactiver la couche cadastre)
            folium.LayerControl().add_to(m)

            # Afficher la carte
            st.markdown("### üìç Localisation des esp√®ces remarquables")
            st_folium(m, width=900, height=600)  

            if selected_parcelle and selected_parcelle != "":
                if st.button("üîç Voir la liste des esp√®ces par parcelle"):
                    st.session_state.selected_parcelle = selected_parcelle
                    st.rerun()
            if st.button("‚¨ÖÔ∏è Retour √† la liste des for√™ts"):
                st.session_state.selected_foret = None
                st.session_state.selected_parcelle = None
                st.rerun()

        # For√™t + parcelle s√©lectionn√©es : afficher les esp√®ces
        else:
            foret = st.session_state.selected_foret
            parcelle = st.session_state.selected_parcelle
            df_filtr√© = df[(df['For√™t'] == foret) & (df['Parcelle de for√™t'] == parcelle)]

            st.subheader(f"üìç Donn√©es pour la for√™t : {foret}, parcelle {parcelle}")
            st.dataframe(df_filtr√©)


            species_list = df_filtr√©['Code taxon (cd_nom)'].unique()
            selected_species = st.selectbox("üîé Choisissez une esp√®ce :", species_list)

            if selected_species:
                df_reference['CD_NOM'] = df_reference['CD_NOM'].astype(str).str.strip()
                selected_species = str(selected_species).strip()
                species_reference_info = df_reference[df_reference['CD_NOM'] == selected_species]

                st.subheader(f"üìò Statuts et prescriptions : {selected_species}")

                if not species_reference_info.empty and pd.notna(species_reference_info['R√¥le_TFT'].iloc[0]) and str(species_reference_info['R√¥le_TFT'].iloc[0]).strip() != "":
                    with st.container():
                        nom_sci_brut = species_reference_info['Nom_scientifique_valide'].iloc[0]

                        # Supprime les balises HTML <i> et </i>
                        nom_sci_sans_balise = nom_sci_brut.replace('<i>', '').replace('</i>', '')

                        # Mets juste le nom scientifique en italique, pas l‚Äôauteur
                        nom_en_italique = nom_sci_sans_balise.split(' (')[0]  # Prend juste "Sympetrum danae"
                        auteur = nom_sci_sans_balise[len(nom_en_italique):]   # R√©cup√®re " (Sulzer, 1776)"

                        # Combine le tout en Markdown
                        nom_final = f"*{nom_en_italique}*{auteur}"
                        st.markdown(f"**Nom scientifique :** {nom_final}")
                        st.markdown(f"**Nom vernaculaire :** {species_reference_info['Nom_vernaculaire'].iloc[0]}")
                        st.markdown(f"**Cat√©gorie naturaliste :** {species_reference_info['Cat_naturaliste'].iloc[0]}")
                        
                        # Affichage des informations sur l'esp√®ce
                        conserv_index = species_reference_info['Indice_priorit√©_conservation'].iloc[0]
                        color = get_conservation_color(conserv_index)

                        st.markdown(f"""
                            <div style='background-color: {color}; padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'>
                            <b>Priorit√© de conservation ‚ÑπÔ∏è :</b> {conserv_index}
                            </div>
                            """, unsafe_allow_html=True)
                        
                        reg_index = species_reference_info['Indice_priorit√©_r√©glementaire'].iloc[0]
                        color_reg = get_reglementaire_color(reg_index)

                        st.markdown(f"""
                            <div style='background-color: {color_reg};  padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'>
                            <b>Priorit√© r√©glementaire ‚ÑπÔ∏è :</b> {reg_index}
                            </div>
                            """, unsafe_allow_html=True)

                        st.markdown ("---")
                        st.markdown(f"**Code unique clause :** {species_reference_info['Code_unique'].iloc[0]}")
                        st.markdown(f"**Condition d'application de la clause :** {species_reference_info['Condition(s)_application_clause'].iloc[0]}")
                        
                        with st.expander("üìã Libell√©s des clauses √† inscrire"):
                            st.write(f"**Libell√© Fiche chantier (TECK) :** {species_reference_info['Libell√©_fiche_chantier_ONF (TECK)'].iloc[0]}")
                            st.write(f"**Libell√© Fiche d√©signation (DESIGNATION MOBILE) :** {species_reference_info['Libell√©_fiche_d√©signation_ONF (DESIGNATION MOBILE)'].iloc[0]}")
                            st.write(f"**Libell√© Fiche vente (PRODUCTION BOIS) :** {species_reference_info['Libell√©_fiche_vente_ONF (PRODUCTION BOIS)'].iloc[0]}")

                        st.markdown(f"**R√¥le du TFT :** {species_reference_info['R√¥le_TFT'].iloc[0]}")


                        st.markdown ("---")
                        with st.expander("‚ÑπÔ∏è L√©gende des indices de priorit√©"):
                            st.markdown("""
                            **Indice de priorit√© de conservation** :
                            - `5` : Priorit√© de conservation majeure
                            - `4` : Priorit√© de conservation tr√®s √©lev√©e 
                            - `3` : Priorit√© de conservation √©lev√©e
                            - `2` : Priorit√© de conservation mod√©r√©e
                            - `1` : Priorit√© de conservation faible

                            **Indice de priorit√© r√©glementaire** :
                            - `4` : Risque r√©glementaire majeur (Esp√®ce r√©glement√©e au niveau europ√©en + national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                            - `3` : Risque r√©glementaire √©lev√© (Esp√®ce r√©glement√©e au niveau national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                            - `2` : Risque r√©glementaire uniquement si les interventions foresti√®res impactent les sp√©cimens.
                            - `1` : La gestion foresti√®re courante de l'ONF suffit √† respecter la r√©glementation associ√©e √† l'esp√®ce, que ce soit sur les sp√©cimens ou sur les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique.
                            - `0` : Esp√®ce non prot√©g√©e.
                            """)

                        # Dictionnaire de correspondance
                        respo_dict = {
                            1: "Faible",
                            2: "Mod√©r√©e",
                            3: "Significative",
                            4: "Forte",
                            5: "Majeure"
                        }

                        # R√©cup√©rer la valeur brute dans le tableau
                        valeur_respo = species_reference_info['Respo_reg'].iloc[0]

                        # Traduire en texte si possible
                        texte_respo = respo_dict.get(valeur_respo, "Non renseign√©e")

                        with st.expander("üü¢D√©tail des statuts"):
                            st.write(f"**Liste rouge r√©gionale :** {traduire_statut(species_reference_info['LR_reg'].iloc[0])}")
                            st.write(f"**Liste rouge nationale :** {traduire_statut(species_reference_info['LR_nat'].iloc[0])}")
                            st.write(f"**Responsabilit√© r√©gionale :** {texte_respo}")
                            st.write(f"**Directives europ√©ennes :** {traduire_statut(species_reference_info['Directives_euro'].iloc[0])}")
                            st.write(f"**Plan d'action :** {traduire_statut(species_reference_info['Plan_action'].iloc[0])}")
                            st.write(f"**Arr√™t√© de protection :** {traduire_statut(species_reference_info['Arr√™t√©_protection'].iloc[0])}")
                            st.write(f"**Article de l'arr√™t√© :** {traduire_statut(species_reference_info['Article_arr√™t√©'].iloc[0])}")
                else:
                    st.info("‚ùå Cette esp√®ce ne fait pas l'objet de prescription environnementale.")

            if st.button("‚¨ÖÔ∏è Retour √† la liste des parcelles"):
                st.session_state.selected_parcelle = None
                st.rerun()
            if st.button("‚¨ÖÔ∏è Retour √† la liste des for√™ts"):
                st.session_state.selected_foret = None
                st.session_state.selected_parcelle = None
                st.rerun()


    # --------------------- PAGE ESPECES ---------------------


    elif page == "Recherche par esp√®ce" :
        st.markdown("### üîé Recherche par esp√®ce")
        st.markdown(
        "<div style='font-size:20px;'>"
        "Entrez un code CD_NOM :"
        "</div>",
        unsafe_allow_html=True
        )
        search_cd_nom = st.text_input(label=" ", label_visibility="collapsed")
        
        st.markdown("""
        <div style='font-size:20px'>
        Si vous connaissez uniquement le nom de l'esp√®ce, tapez-le dans la barre de recherche du site de l'INPN pour obtenir le CD_NOM : <a href='https://inpn.mnhn.fr/accueil/index' target='_blank'>inpn.mnhn.fr</a>
        </div>
        """, unsafe_allow_html=True)

        st.image("inpn_ex.png", use_container_width=True)

        if search_cd_nom:
            search_cd_nom = search_cd_nom.strip()
            st.markdown("""
                <style>
                    div.stMarkdown p, div.stDataFrame, div.stSelectbox, div.stExpander, div[data-testid="stVerticalBlock"] {
                        font-size: 20px !important;
                    }
                    div[data-testid="stMarkdownContainer"] {
                        font-size: 20px !important;
                    }
                </style>
            """, unsafe_allow_html=True)
            match = df_reference[df_reference['CD_NOM'] == search_cd_nom]

            st.subheader(f"üìò Statuts et prescriptions : {search_cd_nom}")

            if not match.empty and str(match['R√¥le_TFT'].iloc[0]).strip().upper() != "N.C.":
                with st.container():
                    nom_sci_brut = match['Nom_scientifique_valide'].iloc[0]

                    # Supprime les balises HTML <i> et </i>
                    nom_sci_sans_balise = nom_sci_brut.replace('<i>', '').replace('</i>', '')

                    # Mets juste le nom scientifique en italique, pas l‚Äôauteur
                    nom_en_italique = nom_sci_sans_balise.split(' (')[0]  # Prend juste "Sympetrum danae"
                    auteur = nom_sci_sans_balise[len(nom_en_italique):]   # R√©cup√®re " (Sulzer, 1776)"

                    # Combine le tout en Markdown
                    nom_final = f"*{nom_en_italique}*{auteur}"
                    st.markdown(f"**Nom scientifique :** {nom_final}")
                    st.markdown(f"**Nom vernaculaire :** {match['Nom_vernaculaire'].iloc[0]}")
                    st.markdown(f"**Cat√©gorie naturaliste :** {match['Cat_naturaliste'].iloc[0]}")
                    
                    conserv_index = match['Indice_priorit√©_conservation'].iloc[0]
                    color = get_conservation_color(conserv_index)

                    st.markdown(f"""
                        <div style='background-color: {color}; padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'>
                        <b>Priorit√© de conservation ‚ÑπÔ∏è :</b> {conserv_index}
                        </div>
                        """, unsafe_allow_html=True)
                    
                    reg_index = match['Indice_priorit√©_r√©glementaire'].iloc[0]
                    color_reg = get_reglementaire_color(reg_index)

                    st.markdown(f"""
                        <div style='background-color: {color_reg};  padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'>
                        <b>Priorit√© r√©glementaire ‚ÑπÔ∏è :</b> {reg_index}
                        </div>
                        """, unsafe_allow_html=True)

                    st.markdown ("---")
                    st.markdown(f"**Code unique clause :** {match['Code_unique'].iloc[0]}")
                    st.markdown(f"**Condition d'application de la clause :** {match['Condition(s)_application_clause'].iloc[0]}")
                    
                    with st.expander("üìã Libell√©s des clauses √† inscrire"):
                        st.write(f"**Libell√© Fiche chantier (TECK) :** {match['Libell√©_fiche_chantier_ONF (TECK)'].iloc[0]}")
                        st.write(f"**Libell√© Fiche d√©signation (DESIGNATION MOBILE) :** {match['Libell√©_fiche_d√©signation_ONF (DESIGNATION MOBILE)'].iloc[0]}")
                        st.write(f"**Libell√© Fiche vente (PRODUCTION BOIS) :** {match['Libell√©_fiche_vente_ONF (PRODUCTION BOIS)'].iloc[0]}")

                    st.markdown(f"**R√¥le du TFT :** {match['R√¥le_TFT'].iloc[0]}")


                    st.markdown ("---")
                    with st.expander("‚ÑπÔ∏è L√©gende des indices de priorit√©"):
                        st.markdown("""
                        **Indice de priorit√© de conservation** :
                        - `5` : Priorit√© de conservation majeure
                        - `4` : Priorit√© de conservation tr√®s √©lev√©e 
                        - `3` : Priorit√© de conservation √©lev√©e
                        - `2` : Priorit√© de conservation mod√©r√©e
                        - `1` : Priorit√© de conservation faible

                        **Indice de priorit√© r√©glementaire** :
                        - `4` : Risque r√©glementaire majeur (Esp√®ce r√©glement√©e au niveau europ√©en + national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                        - `3` : Risque r√©glementaire √©lev√© (Esp√®ce r√©glement√©e au niveau national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                        - `2` : Risque r√©glementaire uniquement si les interventions foresti√®res impactent les sp√©cimens.
                        - `1` : La gestion foresti√®re courante de l'ONF suffit √† respecter la r√©glementation associ√©e √† l'esp√®ce, que ce soit sur les sp√©cimens ou sur les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique.
                        - `0` : Esp√®ce non prot√©g√©e.
                        """)

                    # Dictionnaire de correspondance
                    respo_dict = {
                            1: "Faible",
                            2: "Mod√©r√©e",
                            3: "Significative",
                            4: "Forte",
                            5: "Majeure"
                        }

                    # R√©cup√©rer la valeur brute dans le tableau
                    valeur_respo = match['Respo_reg'].iloc[0]

                    # Traduire en texte si possible
                    texte_respo = respo_dict.get(valeur_respo, "Non renseign√©e")

                    with st.expander("üü¢D√©tail des statuts"):
                        st.write(f"**Liste rouge r√©gionale :** {traduire_statut(match['LR_reg'].iloc[0])}")
                        st.write(f"**Liste rouge nationale :** {traduire_statut(match['LR_nat'].iloc[0])}")
                        st.write(f"**Responsabilit√© r√©gionale :** {texte_respo}")
                        st.write(f"**Directives europ√©ennes :** {traduire_statut(match['Directives_euro'].iloc[0])}")
                        st.write(f"**Plan d'action :** {traduire_statut(match['Plan_action'].iloc[0])}")
                        st.write(f"**Arr√™t√© de protection :** {traduire_statut(match['Arr√™t√©_protection'].iloc[0])}")
                        st.write(f"**Article de l'arr√™t√© :** {traduire_statut(match['Article_arr√™t√©'].iloc[0])}")
            else:
                st.info("‚ùå Il n'existe pas de prescription environnementale pour cette esp√®ce.")